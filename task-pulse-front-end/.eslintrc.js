module.exports = {
	root: true,
	env: { browser: true, es2020: true },
	extends: [
		"airbnb",
		"plugin:@typescript-eslint/recommended",
		"plugin:import/typescript",
		"prettier", // Fix collisions with prettier
	],
	settings: {
		"import/resolver": {
			node: {
				extensions: [".js", ".jsx", ".ts", ".tsx"],
			},
			typescript: {
				project: [__dirname + "/tsconfig.eslint.json", __dirname + "/tsconfig.json"],
			},
		},
	},
	ignorePatterns: [
		"dist",
		".eslintrc.js",
		"tailwind.config.ts",
		"next.config.mjs",
		"next-env.d.ts",
		"postcss.config.js",
	],
	parser: "@typescript-eslint/parser",
	parserOptions: {
		sourceType: "module",
		tsconfigRootDir: __dirname,
		project: ["./tsconfig.eslint.json"],
		warnOnUnsupportedTypeScriptVersion: false,
	},
	plugins: [
		"react-refresh",
		"@typescript-eslint",
		"react-hooks",
		"validate-jsx-nesting",
		"no-only-tests",
		"prettier",
	],
	rules: {
		// "@typescript-eslint/explicit-function-return-type": [
		//     "error",
		//     {
		//         allowExpressions: true,
		//     },
		// ],
		"@typescript-eslint/ban-ts-comment": "warn",
		"@typescript-eslint/ban-types": [
			"error",
			{
				types: {
					"{}": false,
				},
			},
		],
		"@typescript-eslint/explicit-module-boundary-types": "off",
		"@typescript-eslint/lines-between-class-members": "off",
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-floating-promises": "warn",
		"@typescript-eslint/no-non-null-assertion": "off",
		"@typescript-eslint/no-unsafe-declaration-merging": "off",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/consistent-type-imports": "error",
		"@typescript-eslint/consistent-type-exports": "error",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/no-shadow": ["error"],
		"react-hooks/exhaustive-deps": "error",
		"react/function-component-definition": "off",
		"react/no-render-return-value": "off",
		"react/react-in-jsx-scope": "off",
		"react/jsx-indent-props": "off",
		"react/jsx-indent": "off",
		"react/no-unused-prop-types": "off",
		"react/prop-types": "off",
		"react/sort-comp": "off",
		"react/jsx-no-constructed-context-values": "off",
		"react/jsx-no-useless-fragment": ["error", { allowExpressions: true }],
		"react/no-unstable-nested-components": "off",
		"react/jsx-props-no-spreading": "off",
		"react/require-default-props": "off",
		"react/destructuring-assignment": "off",
		"react/jsx-filename-extension": [
			"warn",
			{
				extensions: [".js", ".jsx", ".ts", ".tsx"],
			},
		],
		"no-undef": "off",
		"no-mixed-operators": "off",
		"no-param-reassign": "error",
		"no-plusplus": "off",
		"no-prototype-builtins": "off",
		"no-restricted-globals": "off",
		"no-use-before-define": "off",
		"no-unused-vars": "off",
		"no-tabs": "off",
		"no-underscore-dangle": "off",
		"no-shadow": "off",
		"no-console": "off",
		"arrow-body-style": "off",
		"jsx-a11y/control-has-associated-label": "off",
		"jsx-a11y/click-events-have-key-events": "off",
		"import/extensions": "off",
		"import/prefer-default-export": "off",
		"import/extensions": "off",
		"import/no-cycle": "off",
		"import/no-named-as-default-member": "off",
		"import/no-named-as-default-member": "off",
		"import/no-extraneous-dependencies": [
			"error",
			{
				devDependencies: ["**/*.test.ts"],
			},
		],
		indent: "off",
		quotes: ["error", "double", { avoidEscape: true }],
		"class-methods-use-this": "off",
		"lines-between-class-members": ["error", "always", { exceptAfterSingleLine: true }],
		"padding-line-between-statements": [
			"error",
			{ blankLine: "always", prev: "*", next: "return" },
			{ blankLine: "always", prev: ["const", "let", "var"], next: "*" },
			{ blankLine: "any", prev: ["const", "let", "var"], next: ["const", "let", "var"] },
			{
				blankLine: "always",
				prev: ["multiline-block-like", "block-like", "block"],
				next: "*",
			},
			{
				blankLine: "always",
				prev: "*",
				next: ["multiline-block-like", "block-like", "block"],
			},
			{ blankLine: "any", prev: ["const", "let", "var"], next: ["if", "switch"] },
			{ blankLine: "any", prev: "case", next: "*" },
			{ blankLine: "always", prev: "*", next: "class" },
			{ blankLine: "always", prev: "class", next: "*" },
			{ blankLine: "always", prev: "*", next: "switch" },
			{ blankLine: "always", prev: "switch", next: "*" },
		],
	},
};
